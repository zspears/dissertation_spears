#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Section*
Introduction
\end_layout

\begin_layout Subsection*
Motivation
\end_layout

\begin_layout Standard
Optimization has been the one of the main goals of computational since the
 beginning of computing.
 Designing something to perform optimally in all conditions is the end goal,
 but for the most part we simply focus on local optimization for a single
 application at a time.
 Optimization takes time, however.
 The optimization process can be a very long and arduous task of changing
 the value of a single variable each time and running a new simulation to
 determine what should be done with the new variable value.
 This leads to many simulations for a small benefit.
 This type of optimization tends to be so costly that it prohibits very
 large scale optimizations simply because of run time.
\end_layout

\begin_layout Standard
With this problem in mind, adjoint based optimization was implemented.
 Adjoint based optimization allows for optimization of a multitude of control
 variables in a single simulation.
 The process simply runs the simulation forward to the end of the interaction
 and then maps back the simulation values for each step with a reverse solver
 to determine the direction and magnitude that the control variables should
 be moved.
 Adjoint based optimization is not without flaws itself.
 To run an iteration of adjoint based optimization, the code must run the
 entire forward simulation, while storing every step for use in the reverse
 solver.
 This proves to be very costly for simulations of large size in either the
 time or space components.
 For real world problems, we often need at least one of those components
 to be very large, usually both.
 To get valid results for use with actual problems, we need high fidelity
 in the results, which means we need at least fairly fine meshes in the
 simulation region leading to even larger amounts of data to be stored for
 the reverse solver.
 
\end_layout

\begin_layout Standard
The adjoint problem becomes intractible for the naive approach of just simply
 writing out every step and then reading it back in when necessary.
 For this reason, the concept of checkpointing was originally applied.
 Checkpointing allows for the execution of adjoint-based optimization with
 a greatly reduced need for storage space.
 With checkpoionting, one runs a forward simulation and instead of storing
 every step, only stores a few checkpoints from which to restart the forward
 solver when the reverse solver gets to the point where it needs the steps
 between them.
 This greatly reduces the need for storage space to run a simulation.
 With improvements in how the checkpointing is done, the possible simulations
 are becoming larger and longer.
 Thanks to these advances, adjont based optimization has now become applicable
 to very large problems.
 We introduce a new implementation of checkpointing that allows for adjoint-base
d optiomization of fully 3D jet flows and noise caused by them.
\end_layout

\begin_layout Standard
Jet engine noise is a problem as old as jet fighters themselves.
 As the engines got and continue to get more powerful, the problem of engine
 noise gets continually worse.
 When looking at aircraft carriers, the problem is even larger.
 The solution to jet engine noise in commercial airliners has been universally
 to increase the bypass ratio.
 Increasing the bypass ratio allows for more cold air to be blown around
 the jet engine in the cowlings around the outside.
 This makes for a much larger mixing layer along with making for a much
 slower transition from the ambient air to the hot and fast jet engine exhaust.
 This is not feasible for military jets as the high demands on military
 jets mean that the loss of possible thrust to pushing the bypass air around
 the engine is completely unacceptable.
 Not only are there many jets on the carrier and taking off nearly constantly,
 but the workers on the deck of the carrier are exposed to the jet noise
 from a distance much less than anywhere else.
 This creates a situation that can be extremely dangerous for the hearing
 of the aircraft carrier deck workers.
 Under OSHA regulations, a person working on the deck of a modern aircraft
 carrier could work less than eight minutes before needing to take a full
 day off.
 The noise is even more pervasive, given that when the workers retire from
 the deck for the day, they sleep only a few floors below the source of
 the noise, thus getting exposed to a portion of the noise even in down
 time.
\end_layout

\begin_layout Standard
For the simulation of the real noise generated by the jets, one also has
 to take into account the material properties of the jet engine as well
 as the cowlings and exhaust materials.
 If the materials are too flexible, the jet exhaust tip may deform and lose
 thrust or possibly cause the flow to be even more over or underexpanded,
 leading to even more noise.
 This need leads to the need of a Fluid-Structure interaction feature in
 the code.
 
\end_layout

\begin_layout Standard
Fluid Structure interaction is also important for the other main motivation
 for this research.
 That motivation is protection from blast waves created by explosions, namely
 improvised explosive devices.
 Improvised explosive devices are a plague on the military in the current
 conflicts in the middle east.
 With the improvements in body armor and military intelligence along with
 drone warfare and bombing capabilities, more of the members of the military
 are surviving the actual conflicts.
 This has pushed the insurgent members of the enemy to resort to methods
 of sneak attack.
 The sneak attacks are accomplished by either proximity or remotely activated
 explosives.
 The blast waves from these devices are proving to move directly through
 the current body armor, thus penetrating the soldiers' bodies and creating
 internal hemoraging in any cavities with air such as the lungs.
 The blasts are also causing brain injuries at a rate previously unseen.
 This is probably due again to the advances in military technology and the
 advances in medical technology that is keeping these miliotary members
 who would have died in previous conflicts.
 Since these soldiers are now going to be surviving the blasts, it is the
 duty of science to undertake the job of trying to prevent the blast induced
 brain injuries that are now becoming a major problem for the returning
 soldiers.
\end_layout

\begin_layout Subsection*
Background
\end_layout

\begin_layout Subsubsection*
CFD
\end_layout

\begin_layout Standard
Computational Fluid Dynamics is a field of computational physics that models
 the flows of fluids.
 This uses boundary conditions and definitions of the gas or fluid constitution
 in order to simulate the interaction of the fluids in the flow and the
 surrounding fluid.
 Computational Fluid Dynamics is able to simulate a range of interactions
 and can be used for both compressible and incompressible fluids.
 Turbulent jet modeling is a major application of CFD that is used in this
 paper.
 One can also use CFD to model the propogation of propeller wakes in submarines
 leading to a very similar signature to whale trails.
 This method has been used recently to help in finding submarines travelling
 at reasonable depths that were otherwise invisible to the naked eye or
 radar.
 The uses of CFd are countless and these are just a few that have some tactical
 relationship to the research at hand.
 
\end_layout

\begin_layout Subsubsection*
Compressible Fluids
\end_layout

\begin_layout Standard
Compressible Fluids are those that can be pushed into a smaller space at
 the cost of raising the pressure in the containment.
 For example, air is a compressible fluid.
 One can take easily a 50 mL container of air and compress it into a 30
 mL container.
 The only difference would be the work to force the air in and the difference
 in the pressure and such of the air after it was compressed into the smaller
 space.
 
\end_layout

\begin_layout Subsubsection*
Incompressible Fluids
\end_layout

\begin_layout Standard
Incompressible Fluids cannot be forced into a container of smaller volume.
 For example, water is an incompressible fluid.
 If one tries to take 50 mL of water and press it into a 30 mL container,
 it simply cannot be done.
 This is because water is incompressible.
 
\end_layout

\begin_layout Subsubsection*
LES
\end_layout

\begin_layout Standard
Large Eddy Simulations are simulations of fluid dynamics that include near
 field and far field flows of trubulent flows.
 They allow for better resolution than RANS models and better computational
 efficiency than DNS models.
 
\end_layout

\begin_layout Subsubsection*
Unsteady Simulations
\end_layout

\begin_layout Standard
The simulations used in the studies are unsteady in nature, meaning that
 the flow does not ever reach a steady state and is in constant flux.
 
\end_layout

\begin_layout Subsubsection*
Unstructured Grids
\end_layout

\begin_layout Standard
The code is built on unstructured grids, allowing for much more intricate
 geometries than are possible for the same number of elements in a structured
 code.
 It also allows for easier refinement in some regions without need for global
 refinement.
 
\end_layout

\begin_layout Subsubsection*
CSD
\end_layout

\begin_layout Standard
Computational Structural Dynamics models the motion and reaction of solids
 during collisions and in response to stresses from inside and outside forces.
 THis allows for simulations of large scale structures as well as possibly
 the modeling of the very small scale structure of the material itself.
 In CSD one may model and entire building and how it would respond to a
 collision with a vehicle of some sort, or oen could model the interaction
 of molecules betweeen a shoe and the sidewalk in simulating a person walking.
 CSD has been used in the determination of strength of materials for a long
 time.
 This tells the breaking point of the material due to stress and is very
 important in the design of buildings and building materials as well as
 the field related to this paper of body armor materials.
 Current body armor material models, however, do leave a bit to be desired
 in the matchign of theoretical to actual limits of stopping power.
 
\end_layout

\begin_layout Subsubsection*
FSI
\end_layout

\begin_layout Standard
Fluid-Structure Interaction is a coupling of a fluid solver with a structural
 sover in order to model the reaction of a solid to changes in a fluid flow
 and in return the reactions of the fluid flow to the solid and the changes
 in the solid.
 Fluid structure interaction is used for thisngs such as blast mitigation
 for buildings and blast damage analysis.
 It is also used to test ships' sea worthiness without having to actually
 put a ship out to sea and risk the lives of the people who would have to
 be manning the vessel.
\end_layout

\begin_layout Subsubsection*
Adjoint-Based Optimization
\end_layout

\begin_layout Standard
Optimization of a flow with respect to a certain trait that one would like
 to minimize or maximize.
 Given a control surface with n points, adjoint-based optimization can give
 a large step toward the optimal solution for roughly the cost of 2-3 forward
 simulation compared to n forward simulations with standard optimization
 techniques.
 Storage and communication requirements tend to be a limiting factor for
 adjoint-based optimization making it prohibitively costly without additional
 estimation or other advances.
 
\end_layout

\begin_layout Subsubsection*
Finite Element Method
\end_layout

\begin_layout Standard
Finite element method description
\end_layout

\begin_layout Subsubsection*
Eulerian motion
\end_layout

\begin_layout Standard
Fluid is described in a global reference frame.
 
\end_layout

\begin_layout Subsubsection*
Lagrangian motion
\end_layout

\begin_layout Standard
Motion is described in the frame of reference of the particle and the motion
 of said particle
\end_layout

\begin_layout Subsubsection*
Jet Engine Noise
\end_layout

\begin_layout Standard
Jet engine noise can be divided into two distinct sections.
 The first section is engine noise.
 This includes the actual whir of the turbines along with the intake noise
 and the explosion of the fuel to drive the engine.
 At low speed outputs this is the dominant noise.
 For military jets, as are currently under consideration, the dominating
 noise is the jet flow noise.
 The pressure waves created by the faster moving jet flow interacting with
 the slower moving ambient air propogate much further down stream and are
 thus a problem much farther away.
 Flow noise can propogate in both directions and can be highly dtetrimental
 to the hearing of workers on flight decks as well as buildings neighboring
 air fields.
 Quite regularly, supersonic aircraft blast windows out of homes near airfields
 as the cross the sonic threshold and create the sonic boom.
\end_layout

\begin_layout Subsection*
Previous Work
\end_layout

\begin_layout Subsubsection*
Jet Engine Noise Reduction
\end_layout

\begin_layout Standard
There have been a multitude of papers on jet engine noise reduction.
 The main work that will be focused on in this paper is based on the work
 by Kailasanath et al.
 This work is on the addition of flow disrupters on the end of the exhaust
 nozzle called chevrons.
 These chevrons allow for the sheer regions to be minimized by helping to
 add some vorticity in the streamwise direction of the flow and thus increasing
 the mixing layer.
 The major benefit of this is a small reduction in noise in the aft direction,
 but a large reduction in the forward direction.
 Namely, the chevron addition helps to reduce and eliminate the screech
 from supersonic jets.
 Screech is the forward propogation of the shock wave from the supersonic
 gasses escaping the nozzle in the subsonic ambient air.
 The research also implies that the main noise-generating region of the
 noise that propogates to the far field is the shear layer noise and in
 order to reduce overall far field noise the goal should be to increase
 the mixing layer and thus decrease the shear layer.
 The pressure waves from the mixing layer tend to disipate in the wake of
 the flow in much less time than that of the shear noise.
 Arguably, this would be because the shear noise is escaping without being
 subjected to the vorticity of the mixing layer.
 
\end_layout

\begin_layout Standard
There have also been a number of suggestions for flow interrupters inserted
 into the nozzle of the jet exhaust.
 These are shown to reduce the noise level of the jets, but the need of
 military style jets to utilize every bit of thrust available tends to make
 these solutions a bit too expensive in the thrust cost to be deployable.
 For that reason, the research will be looking into ways of decreasing jet
 engine noise with a minimal and ideally negligible cost to thrust.
 
\end_layout

\begin_layout Standard
One possible solution which could provide both a reduction in noise and
 minimal cost to possibly even marginal gain in thrust is fluidic injection
 at the nozzle mouth.
 Fluidic injection could introduce streamwise vorticity while adding a bit
 of material flowing in the direction of the jet exhaust.
\end_layout

\begin_layout Standard
The code that has been most influential to this research in prior work is
 FeFlo.
 FeFlo is a finite element code capable of doing fully three dimensional
 Large Eddy Simulations for jet engine noise as well as working for a range
 of other applications.
 It was developed by Dr.
 Lohner who is currently at George Mason University.
 FeFlo has been used for adjoint based optimization as well.
 The main drawback for adjoint based optimization as has been used with
 FeFlo is the memory and communication costs as well as the thrashing of
 the hard drives by the repeated overwriting in the calculation.
\end_layout

\begin_layout Standard
Adjoint based optimization has been proposed as a very useful method of
 optimizing systems with large numbers of variables.
 This is because adjoint based optimization makes light work of these variables
 by using onyl one forward solver every iteration as opposed to a minimum
 of n iterations for a control space with n variables.
 Considering some real world control spaces have thousands to millions of
 control points, the finite difference form of optimization becomes intractable
 fairly quickly.
 Adjoint based optimization does have a drawback to it however.
 For an adjoint run to be possible, the adjoint solver needs to have access
 to all of the forward data in reverse order.
 The main problem from this is that in order to have access to the forward
 data in reverse order, one must either store all of the field data at every
 time step and then access it in reverse order or store it in a carefully
 planned way so that it can all be gotten to in one form or another.
 Some people have gotten around this cost by only storing some of the checkpoint
s and simply interpolating between them.
 This does cut some of the cost, but it also introduces more unneccesary
 error into the simulation.
 Others have used Monte Carlo Methods to emulate adjoint based optimization,
 but that requires the running of thousands of forward simulations to get
 a reasonable level of confidence that almost negates the benefit of cutting
 out the need of running all of the simulations for each control point.
 One solution to the data crunch, at least in terms of storage, is to do
 checkpointing of the forward solutions.
 In this manner, one would store a strategic set of forward states and then
 recalculate the in between steps when neccesary.
 This allows for much longer runs and much larger simulations in the same
 storage space.
 The current research looks into the problem of communication costs in the
 adjoint based optimization realm.
\end_layout

\begin_layout Subsubsection*
Fluid Structure Interaction
\end_layout

\begin_layout Standard
Fluid Structure interaction has been used for generations in one form or
 another.
 It started out as one way coupling of fluid pressures to solids and then
 grew to a two-way coupling of the fluid and structure.
 Most of the modern fluid structure codes are using ALE solvers.
 ALE stands for arbitrary Lagrangian-Eulerian solutions.
 This means that the fluids are solved in eulerian form and the solids in
 lagrangian form, as both are naturally done in their respective individual
 codes.
 With ALE forms, a code can only map small deformations before it must be
 regridded in order to avoid the development of nonconvex elements which
 will lead to useless reults.
 This can introduce large time sinks which make the ALE forms extremely
 costly and can introduce some extra error which could be avoided if one
 could write a fluid solver and solid solver in the same coordinates.
 
\end_layout

\begin_layout Standard
Unified continuum methods attempts to do just that.
 Most unified continuum methods take a strictly eulerian approaches for
 the fluid and the solid.
 In most cases they treat the solid as eulerian for the interaction but
 continually map it back to original position in order to calculate the
 standard lagrangian for of the solids and then map back to eulerian for
 the interface.
 The interfact is typically tracked from the movement of the solid and is
 kept in a continuum method such that a small amount of area in the boundary
 region between the solid and fluid is treated as a mixture of the two.
 This leads to a semi-stagnation of the fluid around the solid and can lead
 to some non-physical results.
 
\end_layout

\end_body
\end_document
